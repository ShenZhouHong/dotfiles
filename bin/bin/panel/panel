#! /bin/bash

if [ "$(pgrep -cx panel)" -gt 1 ] ; then
    echo "The panel is already running." 
    exit 1
fi

# trap 'trap - TERM; kill 0' INT TERM QUIT EXIT


init() {
    source api_keys.sh
    source modules.sh
    source settings.sh
    . panel_colors light
    echo $(( PANEL_HEIGHT + PANEL_GAP ))
    clockfile=$(mktemp /tmp/clockfile.XXXX)
    bspc config -m "^1" top_padding $(( PANEL_HEIGHT + PANEL_GAP + 1))
    mkfifo "$PANEL_FIFO_2" "$CLOCK_FIFO" "$PANEL_FIFO"
    bspc subscribe > "$PANEL_FIFO" &
}

shutdown() {
    jobs -p | xargs kill
}

trap shutdown EXIT SIGTERM SIGUSR1

loop() {
    i=0
    while true; do
        keyboard &
        # battery &
        music &
        network &
        wallpaper &
        alsa_volume &
        mail &
        clock $clockfile &
        if (( i % 60 == 0 )); then
            # clock &
            calendar &
        fi
        if (( i % 400 == 0 )); then
            # mail &
            pollution &
            weather &
        fi
        i=$((i+1))
        # Just in case $i gets enormously large and causes problems. 
        # The value in brackets should be a multiple of the other cycles' values
        (( i >= 1600 )) && i=0 
        sleep 1
    done > "$PANEL_FIFO" &
}

main() {
    init
    loop
    PANEL_WM_NAME="bar_wmname"
    echo $PANEL_WIDTH\x$PANEL_HEIGHT+$PANEL_GAP+$PANEL_GAP
    panel_bar 1 < "$PANEL_FIFO" | lemonbar -d -n "$PANEL_WM_NAME" -a 30 -o -2 -g $PANEL_WIDTH\x$PANEL_HEIGHT+$PANEL_GAP+$PANEL_GAP -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 | bash &
    # Depending on the font/platform used, add -o -4 or so to shuift the text up
    # Not necessary with FontAwesome.ttf (4.7.0) and Gohu GohuFont ttf (through AUR)

    # cat "$PANEL_FIFO_2" | panel_bar 2 | lemonbar -g 1910x$PANEL_HEIGHT+1365+5 -f "$PANEL_FONT_FAMILY" -f "$POWERLINE_FONT" -f "$ICON_FONT" -f "$ICON_FONT_2" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 |  zsh &


    tries_left=20
    while [ -z "$wid" ] && [ "$tries_left" -gt 0 ] ; do
            sleep 0.05
            wid=$(xdo id -a "$PANEL_WM_NAME")
            tries_left=$((tries_left - 1))
    done

    [ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

    wait
}

main
